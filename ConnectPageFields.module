<?php

/**
 *
 * Connect Page Fields
 *
 * @author Robin Sallis
 *
 * ProcessWire 3.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class ConnectPageFields extends WireData implements Module, ConfigurableModule {

	/**
	 * Module information
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Connect Page Fields',
			'version' => '2',
			'summary' => "Allows the connecting of two related Page fields so that changing one updates the other.",
			'author' => 'Robin Sallis',
			'autoload' => true,
			'icon' => 'arrows-h',
		);
	}

	/**
	 * Initialise
	 */
	public function init() {
		$this->pages->addHookAfter('saveReady', $this, 'updatePageFields');
		$this->pages->addHookAfter('saveFieldReady', $this, 'updatePageFields');
		$this->addHookBefore('Modules::saveModuleConfigData', $this, 'cleanConfig');
	}


	/**
	 * Deleted config inputfields are not automatically removed the db
	 * so clean the config data before it is saved
	 */
	public function cleanConfig($event) {
		$module_name = $event->arguments('className');
		$config = $event->arguments('configData');
		if(is_object($module_name)) $module_name = $module_name->className();
		if($module_name !== $this->className()) return;
		foreach($config as $key => $value) {
			$num = filter_var($key, FILTER_SANITIZE_NUMBER_INT);
			if($num > $config['fieldset_count']) unset($config[$key]);
		}
		$event->arguments('configData', $config);
	}


	/**
	 * Update Page fields
	 */
	public function updatePageFields($event) {

		$page = $event->arguments('page');
		$tpl = $page->template;
		$config =  $this->modules->getModuleConfigData($this->className());
		unset($config['fieldset_count']); // we don't need fieldset_count
		$flds = $tpl->fieldgroup->find("name=" . implode('|', $config)); // look for connected fields on this page
		if(!$flds->count()) return;

		foreach($flds as $fld) {
			$config_matches = array_keys($config, $fld->name); // find occurrences of field in config
			foreach ($config_matches as $config_match) {
				$letter = $letter = substr($config_match, -1);
				$num = filter_var($config_match, FILTER_SANITIZE_NUMBER_INT);
				// Make sure the pair of fields is populated in module config
				if( "$this->pagefield_{$num}a" && "$this->pagefield_{$num}b" ) {
					// Set the fieldnames we will be dealing with
					$other_letter = $letter === 'a' ? 'b' : 'a';
					$this_fname = $fld->name;
					$other_fname = $config["pagefield_{$num}{$other_letter}"];
					$other_field = $this->fields->get("$other_fname");

					// Update page fields
					if($page->id > 0 && $page->isChanged($this_fname)) {

						// Old value
						$old_value = $this->pages->getById($page->id, array(
							'cache' => false, // don't let it write to cache
							'getFromCache' => false, // don't let it read from cache
							'getOne' => true, // return a Page instead of a PageArray
						))->$this_fname;

						// New value
						$new_value = $page->$this_fname;

						// Value changes
						$added = $new_value->find("id!=$old_value");
						$removed = $old_value->find("id!=$new_value");

						// Apply to other page field
						foreach ($added as $item) {
							$added_valid = $this->modules->InputfieldPage->isValidPage($page, $other_field, $item);
							if ( $added_valid && !$item->$other_fname->has($page) ) {
								$item->of(false);
								$item->$other_fname->add($page);
								$item->save($other_fname);
							}
						}
						foreach ($removed as $item) {
							$removed_valid = $this->modules->InputfieldPage->isValidPage($page, $other_field, $item);
							if ( $removed_valid && $item->$other_fname->has($page) ) {
								$item->of(false);
								$item->$other_fname->remove($page);
								$item->save($other_fname);
							}
						}
					}
				}
			}
		}
	}

	/**
	 * Config inputfields
	 */
	public function getModuleConfigInputfields() {
		$inputfields = new InputfieldWrapper();

		$f = $this->modules->get('InputfieldInteger');
		$f->name = 'fieldset_count';
		$f->label = $this->_('Number of connected field pairs');
		$f->description = $this->_('Save the module config after changing this field.');
		$f->inputType = 'number';
		$f->min = 0;
		$f->max = 20;
		$f->value = $this->fieldset_count ?: 1;
		$inputfields->add($f);

		$count = $this->fieldset_count > 0 ? $this->fieldset_count : 1;
		for($i = 1; $i <= $count; $i++) {
			$fieldset = $this->makeFieldset($i);
			$inputfields->add($fieldset);
		}

		return $inputfields;
	}

	/**
	 * Make fieldset
	 */
	public function makeFieldset($identifier = 'x') {
		$fieldset = $this->modules->get("InputfieldFieldset");
		$fieldset->name = "connected_fields_{$identifier}";
		$fieldset->label = $this->_('Connected field pair') . " $identifier";
		$fieldset->collapsed = Inputfield::collapsedBlank;

		$f = $this->makePageFieldSelect("{$identifier}a");
		$fieldset->add($f);

		$f = $this->makePageFieldSelect("{$identifier}b");
		$fieldset->add($f);

		return $fieldset;
	}


	/**
	 * Make select for Page field
	 */
	public function makePageFieldSelect($identifier = 'xx') {
		$caps_identifier = strtoupper($identifier);
		$f = $this->modules->get('InputfieldSelect');
		$f->name = "pagefield_{$identifier}";
		$f->label = $this->_('PageField') . " $caps_identifier";
		$f->columnWidth = 50;
		$select_options = $this->fields->find("type=FieldtypePage");
		foreach($select_options as $select_option) {
			$f->addOption($select_option->name, $select_option->label ?: $select_option->name);
		}
		$config_field = "pagefield_{$identifier}";
		$f->value = $this->$config_field;
		return $f;
	}

}