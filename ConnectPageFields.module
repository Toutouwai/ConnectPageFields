<?php namespace ProcessWire;

class ConnectPageFields extends WireData implements Module, ConfigurableModule {

	/**
	 * Module information
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Connect Page Fields',
			'summary' => "Allows the connecting of two related Page Reference fields so that changing one updates the other.",
			'version' => '0.3.2',
			'author' => 'Robin Sallis',
			'href' => 'https://github.com/Toutouwai/ConnectPageFields',
			'icon' => 'arrows-h',
			'autoload' => true,
			'requires' => 'ProcessWire>=3.0.166, PHP>=5.4.0',
		);
	}

	/**
	 * Array of connected Page Reference fields according to module config
	 */
	protected $connected_fields = [];

	/**
	 * Init
	 */
	public function init() {
		$this->wire()->pages->addHookAfter('saveReady', $this, 'pageSave', ['priority' => 200]);
		$this->wire()->pages->addHookAfter('added', $this, 'pageSave', ['priority' => 200]);
		$this->wire()->pages->addHookAfter('saveFieldReady', $this, 'fieldSave', ['priority' => 200]);
	}

	/**
	 * Ready
	 */
	public function ready() {
		$this->addHookBefore('ProcessModule::executeEdit', $this, 'addConfigAssets');
		$this->addHookBefore('Modules::saveModuleConfigData', $this, 'processConfig');
	}

	/**
	 * A page is ready to be saved, or was just added
	 *
	 * @param HookEvent $event
	 */
	protected function pageSave(HookEvent $event) {
		$page = $event->arguments(0);
		// Return if this a new never-before-saved page
		if(!$page->id) return;
		// Return if page was already saved by this module (prevent recursion)
		if($page->cpf_saved) return;
		// Set custom property to indicate if page was just added
		$page->cpf_added = $event->method === 'added';
		// Look for connected fields on this page
		$this->determineConnectedFields();
		/* @var Fieldgroup $flds */
		$flds = $page->template->fieldgroup->find("id=" . implode('|', $this->connected_fields));
		foreach($flds as $field) {
			// Skip if this is not a newly added page and field hasn't changed
			if(!$page->cpf_added && !$page->isChanged($field->name)) continue;
			$this->updateConnectedFields($page, $field);
		}
	}

	/**
	 * A field on a page is ready to be saved
	 *
	 * @param HookEvent $event
	 */
	protected function fieldSave(HookEvent $event) {
		$page = $event->arguments(0);
		$field = $event->arguments(1);
		// Return if page was already saved by this module (prevent recursion)
		if($page->cpf_saved) return;
		// Return if this field isn't a Page Reference field
		if($field->type != 'FieldtypePage') return;
		$this->determineConnectedFields();
		$this->updateConnectedFields($page, $field);
	}


	/**
	 * Update Page Reference fields that are connected to a field
	 *
	 * @param Page $page The page that is being saved or was just added
	 * @param Field $field A Page Reference field on that page
	 */
	protected function updateConnectedFields(Page $page, Field $field) {
		$this_fname = $field->name;
		$this_is_multi = $field->derefAsPage == FieldtypePage::derefAsPageArray ? true : false;

		// Find occurrences of field in config
		$cfg_matches = array_keys($this->connected_fields, $field->id);
		foreach($cfg_matches as $cfg_match) {
			$unique = substr($cfg_match, -13); // last 13 characters are the unique code
			$num = $cfg_match[10];

			// Make sure the pair of fields is populated in module config
			if(!$this->connected_fields["pagefield_1_{$unique}"] || !$this->connected_fields["pagefield_2_{$unique}"]) continue;

			// Get the other field
			$other_num = $num === '1' ? '2' : '1';
			$other_field = $this->wire()->fields->get($this->connected_fields["pagefield_{$other_num}_{$unique}"]);
			if(!$other_field) continue;
			$other_fname = $other_field->name;

			$other_is_multi = $other_field->derefAsPage == FieldtypePage::derefAsPageArray ? true : false;

			// Old value
			if($page->cpf_added) {
				// This is a newly added page, so the old value will be an empty field value
				$old_value = $this_is_multi ? $this->wire(new PageArray()) : $this->wire(new NullPage());
			} else {
				$old_value = $this->wire()->pages->getById($page->id, [
					'cache' => false, // don't let it write to cache
					'getFromCache' => false, // don't let it read from cache
					'getOne' => true, // return a Page instead of a PageArray
				])->$this_fname;
			}

			// New value
			if($page->cpf_added) {
				// This is a newly added page, so the new value will be an empty field value
				$new_value = $this_is_multi ? $this->wire(new PageArray()) : $this->wire(new NullPage());
			} else {
				$new_value = $page->$this_fname;
			}

			// Value changes
			if($this_is_multi) {
				// For multi Page fields
				$added = $new_value->find("id!=$old_value");
				$removed = $old_value->find("id!=$new_value");
			} else {
				// For non-multi Page fields
				$added = $this->wire(new PageArray());
				$removed = $this->wire(new PageArray());
				// If the old value was a Page and not a NullPage
				if($old_value && $old_value->id) $removed->add($old_value);
				// If the new value is a Page and not a NullPage
				if($new_value && $new_value->id) $added->add($new_value);
			}

			// Apply to other field
			foreach($added as $item) {
				if(!$item->fields->get($other_fname)) continue;
				$added_valid = $this->wire()->modules->InputfieldPage->isValidPage($page, $other_field, $item);
				if($other_is_multi) {
					$not_existing = !$item->$other_fname->has($page);
				} else {
					$not_existing = !$item->$other_fname || $item->$other_fname->id !== $page->id;
				}
				if($added_valid && $not_existing) {
					$item->of(false);
					$other_is_multi ? $item->$other_fname->add($page) : $item->$other_fname = $page;
					// Set custom property for preventing recursion
					$item->cpf_saved = true;
					$item->save($other_fname);
				}
			}
			foreach($removed as $item) {
				if(!$item->fields->get($other_fname)) continue;
				$removed_valid = $this->wire()->modules->InputfieldPage->isValidPage($page, $other_field, $item);
				if($other_is_multi) {
					$existing = $item->$other_fname->has($page);
				} else {
					$existing = $item->$other_fname && $item->$other_fname->id === $page->id;
				}
				if($removed_valid && $existing) {
					$item->of(false);
					$other_is_multi ? $item->$other_fname->remove($page) : $item->$other_fname = '';
					// Set custom property for preventing recursion
					$item->cpf_saved = true;
					$item->save($other_fname);
				}
			}
		}
	}

	/**
	 * Determine the connected Page Reference fields according to the module config
	 */
	protected function determineConnectedFields() {
		$cfg = $this->modules->getModuleConfigData($this->className());
		$connected_fields = [];
		foreach($cfg as $key => $value) {
			// We only want the data relating to Page Reference connections
			if(strpos($key, 'pagefield') === 0) $connected_fields[$key] = $value;
		}
		$this->connected_fields = array_filter($connected_fields);
	}

	/**
	 * Add CSS and JS for module config page
	 *
	 * @param HookEvent $event
	 */
	protected function addConfigAssets(HookEvent $event) {
		if($this->wire()->input->get->name !== $this->className) return;
		$info = $this->getModuleInfo();
		$version = $info['version'];
		$config = $this->config;
		$config->styles->add($config->urls->$this . "module_config.css?v=$version");
		$config->scripts->add($config->urls->$this . "module_config.js?v=$version");
	}

	/**
	 * Process the config data on save
	 *
	 * @param HookEvent $event
	 */
	protected function processConfig(HookEvent $event) {
		$module_name = $event->arguments(0);
		$cfg = $event->arguments(1);
		if(is_object($module_name)) $module_name = $module_name->className();
		if($module_name !== $this->className()) return;

		// If the "Add another row" button was clicked
		if($cfg['add_new']) {
			$cfg['codes'] .= $cfg['unique'] . '|';
		}

		// If any rows were marked for deletion
		$delete_codes = [];
		foreach($cfg as $key => $value) {
			if (strpos($key, 'delete_') === 0 && $value === 1) {
				$delete_codes[] = substr($key, -13); // last 13 characters are the unique code;
			}
		}
		if(count($delete_codes)) {
			foreach($delete_codes as $delete_code) {
				$cfg['codes'] = str_replace("$delete_code|", '', $cfg['codes']);
			}
			foreach($cfg as $key => $value) {
				if($this->strposa($key, $delete_codes, 0)) {
					unset($cfg[$key]);
				}
			}
		}

		// Set processed config
		$event->arguments(1, $cfg);
	}

	/**
	 * strpos() with array of strings as needle
	 *
	 * @param string $haystack
	 * @param array|string $needle
	 * @param int $offset
	 * @return bool
	 */
	public function strposa($haystack, $needle, $offset = 0) {
		if(!is_array($needle)) $needle = [$needle];
		foreach($needle as $query) {
			if(strpos($haystack, $query, $offset) !== false) return true;
		}
		return false;
	}

	/**
	 * Config inputfields
	 *
	 * @param InputfieldWrapper $inputfields
	 */
	public function getModuleConfigInputfields($inputfields) {
		$inputfields->add($this->makeCodes());
		$inputfields->add($this->makeUnique());
		$codes = explode('|', rtrim($this->codes, '|'));
		$i = 1;
		foreach($codes as $code) {
			if(!$code) break;
			$inputfields->add($this->makeFieldset($code, $i));
			$i++;
		}
		$inputfields->add($this->makeAddNew());
	}

	/**
	 * Make codes field
	 *
	 * @return InputfieldTextarea
	 */
	protected function makeCodes() {
		/* @var InputfieldTextarea $f */
		$f_name = 'codes';
		$f = $this->modules->get('InputfieldTextarea');
		$f->name = $f_name;
		$f->value = $this->$f_name;
		$f->collapsed = Inputfield::collapsedHidden;
		return $f;
	}

	/**
	 * Make unique field
	 *
	 * @return InputfieldText
	 */
	protected function makeUnique() {
		/* @var InputfieldText $f */
		$f = $this->modules->get('InputfieldText');
		$f->name = 'unique';
		$f->value = uniqid();
		$f->collapsed = Inputfield::collapsedHidden;
		return $f;
	}

	/**
	 * Make 'Add New' button
	 *
	 * @return InputfieldCheckbox
	 */
	protected function makeAddNew() {
		/* @var InputfieldCheckbox $f */
		$f = $this->modules->get('InputfieldCheckbox');
		$f->name = 'add_new';
		$f->label = $this->_('Add another row');
		return $f;
	}

	/**
	 * Make fieldset
	 *
	 * @param string $identifier
	 * @param int $number
	 * @return InputfieldFieldset
	 */
	protected function makeFieldset($identifier, $number) {
		/* @var InputfieldFieldset $fieldset */
		$fieldset = $this->modules->get('InputfieldFieldset');
		$fieldset->name = "row_{$identifier}";
		$fieldset->label = $this->_('Connected field pair') . " $number";
		$f = $this->makePageFieldSelect(1, 'A', $identifier);
		$fieldset->add($f);
		$f = $this->makePageFieldSelect(2, 'B', $identifier);
		$fieldset->add($f);
		$f = $this->makeDeleteCheckbox($identifier);
		$fieldset->add($f);
		return $fieldset;
	}

	/**
	 * Make checkbox for row deletion
	 *
	 * @param string $identifier
	 * @return InputfieldCheckbox
	 */
	protected function makeDeleteCheckbox($identifier) {
		/* @var InputfieldCheckbox $f */
		$f = $this->modules->get('InputfieldCheckbox');
		$f->name = "delete_{$identifier}";
		$f->label = $this->_('Delete');
		return $f;
	}

	/**
	 * Make select for Page field
	 *
	 * @param int $number
	 * @param string $letter
	 * @param string $identifier
	 * @return InputfieldSelect
	 */
	protected function makePageFieldSelect($number, $letter, $identifier) {
		$f_name = "pagefield_{$number}_{$identifier}";
		/* @var InputfieldSelect $f */
		$f = $this->modules->get('InputfieldSelect');
		$f->name = $f_name;
		$f->label = $this->_('Page field') . " $letter";
		$f->required = true;
		$f->columnWidth = 50;
		$select_options = $this->fields->find("type=FieldtypePage");
		$f->addOption(''); // first item blank
		foreach($select_options as $select_option) {
			$f->addOption($select_option->id, $select_option->label ?: $select_option->name);
		}
		$f->value = $this->$f_name;
		return $f;
	}

	/**
	 * Install
	 */
	public function ___install() {
		// Create one row code to get things started
		$this->modules->saveModuleConfigData($this->className, ['codes' => uniqid() . '|']);
	}

	/**
	 * Upgrade
	 * @param $fromVersion
	 * @param $toVersion
	 */
	public function ___upgrade($fromVersion, $toVersion) {
		// Convert integer version to semantic version
		if(is_int($fromVersion)) $fromVersion = '0.0.' . $fromVersion;

		// Upgrade from < v0.2.2
		if(version_compare($fromVersion, '0.2.2', '<')) {
			// Get existing config
			$cfg = $this->modules->getModuleConfigData($this->className());
			foreach($cfg as $key => $value) {
				if(strpos($key, 'pagefield') !== 0) continue;
				$f = $this->wire()->fields->get($value);
				// Replace field name with field ID
				$cfg[$key] = $f->id;
			}
			// Save config
			$this->modules->saveModuleConfigData($this->className(), $cfg);
		}

		// Upgrade from < v0.0.5
		if(version_compare($fromVersion, '0.0.5', '<')) {
			// Get existing config
			$cfg = $this->modules->getModuleConfigData($this->className());
			// Organise into groups
			$cfg_grouped = [];
			foreach($cfg as $key => $value) {
				if(strpos($key, 'pagefield') !== false) { // we only want the pagefield config fields
					$num = filter_var($key, FILTER_SANITIZE_NUMBER_INT);
					$cfg_grouped[$num][$key] = $value;
				}
			}
			// Set new config
			$new_cfg = [];
			$new_cfg['codes'] = '';
			foreach($cfg_grouped as $key => $value) {
				if(is_array($value)) {
					$unique = uniqid();
					$new_cfg['codes'] .= "$unique|";
					$i = 1;
					foreach($value as $key2 => $value2) {
						$new_key = substr($key2, 0, -2) . $i . "_$unique";
						$new_cfg[$new_key] = $value2;
						$i++;
					}
				}
			}
			$this->modules->saveModuleConfigData($this->className(), []); // clear config
			$this->modules->saveModuleConfigData($this->className(), $new_cfg); // save new config
		}
	}

}
